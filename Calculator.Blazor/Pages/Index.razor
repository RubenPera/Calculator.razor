@page "/"

@inject IJSRuntime _jsRuntime;
@inject IBaseRepository<Calculation> _calculationRepository
@inject NavigationManager _navManager

<h3>Calculations</h3>

@foreach (var calculation in Calculations)
{
                <div class="card mb-3" style="max-width: 540px;" @onclick="@(x => OpenCalculation(calculation.Id))">
                <div class="row g-0">
                    <div class="col-md-8">
                        <div class="card-body">
                            <h5 class="card-title">@calculation.Name</h5>
                            <p class="card-text">TODO</p>
                            <p class="card-text"><small class="text-muted">@calculation.CreatedAt</small></p>
                        </div>
                    </div>
                </div>
            </div>
}

<button @onclick="AddCalculation">Add Calculation</button>
<button @onclick="ClearCalculations">Clear Calculations</button>

@code {
    private const string CalculationKey = "Calculations";
    private static Func<Task> action;
    private IList<Calculation> Calculations = new List<Calculation>();

    protected override async Task OnInitializedAsync()
    {
        await SetCalculations();

        action = SetCalculations;
    }

    [JSInvokable]
    public static async Task ExternalChange()
    {
        await action?.Invoke();
    }

    private async Task SetCalculations()
    {
        var calculations = await _calculationRepository.GetAll();

        if (calculations != null)
        {
            Calculations = calculations;

            this.StateHasChanged();
        }
    }

    private async Task AddCalculation()
    {
        var name = await _jsRuntime.InvokeAsync<string>("prompt", "What is the name of the new Calculation?");

        if (string.IsNullOrWhiteSpace(name)) return;

        await _calculationRepository.CreateOrUpdate(new Calculation
        {
            Name = name,
            CreatedAt = DateTime.Now
        });

        await SetCalculations();
    }

    private async Task ClearCalculations()
    {
        await _calculationRepository.DeleteAll();

        await SetCalculations();
    }

    private void OpenCalculation(Guid calculationId)
    {
        _navManager.NavigateTo($"/calculation/{calculationId}");
    }
}
