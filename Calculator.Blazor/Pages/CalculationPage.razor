@page "/Calculation/{Id:guid}"

@inject IBaseRepository<Calculation> _calculationRepository

<div>
    <h3>@Calculation.Name</h3>

    <ul>
        @foreach (var entry in Calculation.Entries)
        {
                        <li>@entry.Value</li>
        }
    </ul>

    <input type="text" @bind-value="InputValue" @onkeydown="InputValueChanged" pattern="[0-9]*"
        @onkeydown:preventDefault />
    <input type="button" @onclick="Submit" value="Submit" />

</div>

@code{
    [Parameter]
    public Guid Id { get; set; }

    public Calculation Calculation { get; set; } = new Calculation();

    public string InputValue { get; set; } = string.Empty;

    public string[] AllowedKeys = new[] { "+", "-", "=" };


    protected override async Task OnInitializedAsync()
    {
        Calculation = await _calculationRepository.GetById(Id);
    }


    private async Task InputValueChanged(KeyboardEventArgs e)
    {
        InputValue = ((int.TryParse(e.Key, out var _), e.Key, e.CtrlKey)) switch
        {
            (true, _, _) => InputValue += e.Key,
            (false, ".", _) => InputValue += e.Key,
            (false, ",", _) => InputValue += e.Key,
            (false, "+", _) => InputValue += e.Key,
            (false, "-", _) => InputValue += e.Key,
            (false, "=", _) => await AddEntry() ? string.Empty : InputValue,
            (false, "Backspace", true) => string.Empty,
            (false, "Backspace", false) => string.Join("", InputValue.SkipLast(1)),
            _ => InputValue,
        };
    }

    private async Task<bool> AddEntry()
    {
        if (string.IsNullOrWhiteSpace(InputValue)) return false;

        Calculation.Entries.Add(new CalculationEntry
        {
            Value = InputValue,
        });

        await _calculationRepository.CreateOrUpdate(Calculation);

        return true;
    }
    
    private async Task Submit()
    {
        Calculation.Entries.Add(new CalculationEntry
        {
            Value = 12.ToString()
        });
    }
}