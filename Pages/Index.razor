@page "/"

@inject IJSRuntime _jsRuntime;
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject NavigationManager _navManager

<h3>Calculations</h3>

@foreach (var calculation in Calculations)
{
    <div class="card mb-3" style="max-width: 540px;" @onclick="@(x => OpenCalculation(calculation.Id))">
    <div class="row g-0">
        <div class="col-md-8">
            <div class="card-body">
                <h5 class="card-title">@calculation.Name</h5>
                <p class="card-text">TODO</p>
                <p class="card-text"><small class="text-muted">@calculation.CreatedAt</small></p>
            </div>
        </div>
    </div>
</div>
}

<button @onclick="AddCalculation">Add Calculation</button>
<button @onclick="ClearCalculations">Clear Calculations</button>

@code {
    private const string CalculationKey = "Calculations";
    private static Func<Task> action;
    private IList<CalculationEntity> Calculations = new List<CalculationEntity>();

    protected override async Task OnInitializedAsync()
    {
        await SetCalculations();

        action = SetCalculations;
    }

    [JSInvokable]
    public static async Task ExternalChange()
    {
        await action?.Invoke();
    }

    private async Task SetCalculations()
    {
        var calculations = await _localStorage.GetItemAsync<List<CalculationEntity>>(CalculationKey);

        if (calculations != null)
        {
            Calculations = calculations;

            this.StateHasChanged();
        }
    }

    private async Task AddCalculation()
    {
        var name = await _jsRuntime.InvokeAsync<string>("prompt", "What is the name of the new Calculation?");

        if (string.IsNullOrWhiteSpace(name)) return;

        Calculations.Add(new CalculationEntity
        {
            Id = Calculations.Last().Id + 1,
            Name = name,
            CreatedAt = DateTime.Now
        });

        await _localStorage.SetItemAsync(CalculationKey, Calculations);
    }

    private async Task ClearCalculations()
    {
        Calculations = new List<CalculationEntity>();

        await _localStorage.SetItemAsync(CalculationKey, Calculations);
    }

    private void OpenCalculation(int calculationId)
    {
        _navManager.NavigateTo($"/calculation/{calculationId}");
    }
}
